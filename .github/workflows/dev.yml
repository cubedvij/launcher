name: Launcher Dev-Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    permissions:
      contents: write
      pages: write
      id-token: write
      attestations: write

    env:
      # Ensures Python uses UTF-8 encoding by default
      PYTHONUTF8: 1
      # Disables rich text formatting in Flet CLI output
      FLET_CLI_NO_RICH_OUTPUT: 1
      # Disables progress bars when using UV
      UV_NO_PROGRESS: 1

    steps:
      - name : Checkout code
        uses: actions/checkout@v4

      - name: Cache Flutter dependencies (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter

      - name: Cache Flutter dependencies (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: C:\hostedtoolcache\windows\flutter
          key: ${{ runner.os }}-flutter

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.29.2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-0 \
            libgtk-3-dev \
            libnss3 \
            libx11-6 \
            libglib2.0-0 \
            libxkbcommon0 \
            libasound2t64 \
            libgdk-pixbuf2.0-0 \
            libxcomposite1 \
            libxrandr2 \
            libxdamage1 \
            libxext6 \
            libxfixes3 \
            libxrender1 \
            libxcb1 \
            libfuse2 \
            wget

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          activate-environment: true

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Run script
        run: |
          python update_version.py --dev

      - name: Build Flet app (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          flet build \
          --compile-app \
          --compile-packages \
          --cleanup-app \
          --cleanup-packages \
          --no-rich-output \
          --verbose \
          linux
        working-directory: .

      - name: Prepare AppDir structure
        run: |
          rm -rf AppDir || true
          mkdir -p AppDir/usr/cubedvij_launcher
          mkdir -p AppDir/usr/share/icons/hicolor/64x64/apps
          mkdir -p AppDir/usr/share/applications

          # Copy your built app files
          cp -r build/linux/* AppDir/usr/cubedvij_launcher/

          # Copy icon
          cp linux/logo.png AppDir/usr/share/icons/hicolor/64x64/apps/cubedvij-launcher.png

          # Copy desktop file
          cp linux/cubedvij_launcher.desktop AppDir/usr/share/applications/cubedvij_launcher.desktop

          # Make sure your app executable is executable
          chmod +x AppDir/usr/cubedvij_launcher/cubedvij_launcher

      - name: Download appimagetool
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage

      - name: Build AppImage
        run: |
          ./appimagetool-x86_64.AppImage AppDir

      - name: Build Flet app (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          flet build \
          --compile-app \
          --compile-packages \
          --cleanup-app \
          --cleanup-packages \
          --no-rich-output \
          --verbose \
          windows 
        working-directory: .

      - name: Sign Windows Executable
        if: runner.os == 'Windows'
        uses: dlemstra/code-sign-action@v1
        with:
          certificate: '${{ secrets.CERTIFICATE }}'
          password: '${{ secrets.CERTIFICATE_PASSWORD }}'
          recursive: false
          files: |
            build/windows/cubedvij_launcher.exe

      - name: Build AppImage (Linux)
        if: runner.os == 'Linux'
        env:
          UPDATE_INFO: gh-releases-zsync|AOS|CubeDvij-Launcher|latest|*x86_64.AppImage.zsync
        run: |
          appimage-builder --recipe ./linux/appimage-builder.yml

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}
          path: |
            build/linux/FletApp-x86_64.AppImage
            build/windows/
          compression-level: 9
          include-hidden-files: true

      - name: Minimize uv cache
        run: uv cache prune --ci
